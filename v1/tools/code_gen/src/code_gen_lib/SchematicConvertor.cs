using ls_code_gen;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace code_gen_lib
{
    public class SchematicConvertor
    {

        public SchematicConvertor()
        {
            InputPins = new List<string>();
            OutputPins = new List<string>();
            Components = new List<Component>();
        }
        private static string header = "/* Logosent Autogenerated Code */ \n/******* Do not modify *******/\n";

        private static string componentFormat = "  {0}\t\t: {1}\t\t{{{2}}}\t{{{3}}}";

        private static string paramFormat = "  {0}\t\t: {1}\t\t{{{2}}}";

        public String SchematicName { get; set; }

        public List<String> InputPins { get; set; }

        public List<String> OutputPins { get; set; }

        public List<Component> Components { get; set; }

        bool isInConnection(string connection)
        {
            bool res = false;
            string[] ss = connection.Split('-');
            res = ss[0] == "in";

            return res;
        }
        bool isOutConnectionName(string connection, string pinName)
        {
            bool res = false;
            string[] ss = connection.Split('-');
            res = ss[0].StartsWith( "out") && ss[1].Contains(pinName);

            return res;
        }
  


        Component getComponentWhichProducesOutPin(string pinName)
        {
            Component component1= null;
            foreach (Component component in Components)
            {
                foreach (string oc in component.OutputConnections) {
                    if (isOutConnectionName(oc, pinName))
                    {
                        component1 = component;
                    }
                }
            }

            return component1;
        }
        
        public String GenerateScript()
        {
            string inputPinString = String.Empty;
            string outputPinString = String.Empty;

            try
            {
                foreach (String inPin in InputPins)
                {
                    inputPinString = String.Format("{0} {1}", inputPinString, inPin);
                }
                inputPinString = inputPinString.Trim();

                foreach (String outPin in OutputPins)
                {
                    outputPinString = String.Format("{0} {1}", outputPinString, outPin);
                }
                outputPinString = outputPinString.Trim();

                int maxINameLength = 0;
                int maxCNameLength = 0;
                foreach (Component component in Components)
                {
                    if (component.InstanceName.Length > maxINameLength)
                    {
                        maxINameLength = component.InstanceName.Length;
                    }
                    if (component.ComponentName.Length > maxCNameLength)
                    {
                        maxCNameLength = component.ComponentName.Length;
                    }
                }

                StringBuilder sb = new StringBuilder();

                sb.AppendLine(String.Format("{0}", header));
                sb.AppendLine(String.Format(".MAIN {0} {{{1}}} {{{2}}}", SchematicName, inputPinString, outputPinString));
                sb.AppendLine();

                string inputConnString = String.Empty;
                string outputConnString = String.Empty;

                foreach (Component component in Components)
                {
                    inputConnString = String.Empty;
                    outputConnString = String.Empty;

                    foreach (String inConnection in component.InputConnections)
                    {
                        inputConnString = String.Format("{0} {1}", inputConnString, inConnection.ToString());
                    }
                    inputConnString = inputConnString.Trim();

                    foreach (String outConnection in component.OutputConnections)
                    {
                        outputConnString = String.Format("{0} {1}", outputConnString, outConnection.ToString());
                    }
                    outputConnString = outputConnString.Trim();
                    string sss = String.Format(componentFormat, component.InstanceName.PadRight(maxINameLength), component.ComponentName.PadRight(maxCNameLength), inputConnString, outputConnString);
                    sb.AppendLine(String.Format(componentFormat, component.InstanceName.PadRight(maxINameLength), component.ComponentName.PadRight(maxCNameLength), inputConnString, outputConnString));
                }

                sb.AppendLine(".END");
                sb.AppendLine();
                sb.AppendLine();
                sb.AppendLine(".PARAM // Sigma primitive generation parameters");

                string paramString = String.Empty;

                foreach (Component component in Components)
                {
                    paramString = String.Empty;


                    foreach (ComponentParameter compParameter in component.Parameters)
                    {
                        paramString = String.Format("{0} {1}", paramString, compParameter.ToString());
                    }
                    paramString = paramString.Trim();

                    sb.AppendLine(String.Format(paramFormat, component.InstanceName.PadRight(maxINameLength), component.ComponentName.PadRight(maxCNameLength), paramString));
                }
                sb.AppendLine(".END");

                return sb.ToString();
            }
            catch (Exception ex)
            {
                return String.Empty;
            }
        }
        public String GenerateDriverCode(CodeGenInfo oCodeGen)
        {
            string inputPinString = String.Empty;
            string outputPinString = String.Empty;

            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(String.Format(header, "/* " + SchematicName + " */\n"));
                sb.AppendLine();

                string inputConnString = String.Empty;
                string outputConnString = String.Empty;
                lsInputInfo olsInputInfo = new lsInputInfo(InputPins, Components);
                inputConnString = olsInputInfo.printCfg(oCodeGen);
                sb.AppendLine(oCodeGen.DriverData);
                sb.AppendLine(oCodeGen.DriverCode);
                inputConnString = olsInputInfo.printAxi(oCodeGen);
                sb.AppendLine(oCodeGen.DriverData);
                sb.AppendLine(oCodeGen.DriverCode);

                return sb.ToString();
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

    }
}
