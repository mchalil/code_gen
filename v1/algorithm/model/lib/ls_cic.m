classdef ls_cic < handle
    %LS_CIC Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        nCount;
        BlockSize;
        N;
        M;
        R;
        aState;
        aDelayBuff;
        aCompOut;
    end
    methods (Static)
        function y = tst()
            x = [	0,	1,	1,	2,	3,	3,	4,	4,	5,	6,	6,	7,	8,	8,	9,	9,	10,	11,	11,	12,	13,	13,	14,	14,	15,	16,	16,	17,	17,	18,	19,	19,	20,	21,	21,	22,	22,	23,	24,	24,	25,	25,	26,	27,	27,	28,	28,	29,	30,	30,	31,	31,	32,	33,	33,	34,	34,	35,	36,	36,	37,	37,	38,	39,	39,	40,	40,	41,	41,	42,	43,	43,	44,	44,	45,	45,	46,	46,	47,	48,	48,	49,	49,	50,	50,	51,	51,	52,	52,	53,	54,	54,	55,	55,	56,	56,	57,	57,	58,	58,	59,	59,	60,	60,	61,	61,	62,	62,	63,	63,	64,	...
                64,	65,	65,	66,	66,	67,	67,	68,	68,	68,	69,	69,	70,	70,	71,	71,	72,	72,	72,	73,	73,	74,	74,	75,	75,	75,	76,	76,	77,	77,	77,	78,	78,	79,	79,	79,	80,	80,	81,	81,	81,	82,	82,	82,	83,	83,	83,	84,	84,	84,	85,	85,	85,	86,	86,	86,	87,	87,	87,	88,	88,	88,	88,	89,	89,	89,	90,	90,	90,	90,	91,	91,	91,	92,	92,	92,	92,	92,	93,	93,	93,	93,	94,	94,	94,	94,	94,	95,	95,	95,	95,	95,	96,	96,	96,	96,	96,	97,	97,	97,	97,	97,	97,	97,	98,	98,	98,	98,	98,	98,	98, ...
                98,	99,	99,	99,	99,	99,	99,	99,	99,	99,	99,	99,	99,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	99,	99,	99,	99,	99,	99,	99,	99,	99,	99,	99,	98,	98,	98,	98,	98,	98,	98,	98,	97,	97,	97,	97,	97,	97,	97,	96,	96,	96,	96,	96,	96,	95,	95, ...
                95,	95,	95,	94,	94,	94,	94,	93,	93,	93,	93,	93,	92,	92,	92,	92,	91,	91,	91,	91,	90,	90,	90,	89,	89,	89,	89,	88,	88,	88,	87,	87,	87,	86,	86,	86,	85,	85,	85,	84,	84,	84,	83,	83,	83,	82,	82,	82,	81,	81,	81,	80,	80,	79,	79,	79,	78,	78,	78,	77,	77,	76,	76,	76,	75,	75,	74,	74,	73,	73,	73,	72,	72,	71,	71,	70,	70,	69,	69,	69,	68,	68,	67,	67,	66,	66,	65,	65,	64,	64,	63,	63,	62,	62,	61,	61,	60,	60,	59,	59,	58,	58,	57,	57,	56,	56,	55,	55,	54,	54,	53,...
                53,	52,	52,	51,	50,	50,	49,	49,	48,	48,	47,	47,	46,	46,	45,	44,	44,	43,	43,	42,	42,	41,	40,	40,	39,	39,	38,	38,	37,	36,	36,	35,	35,	34,	33,	33,	32,	32,	31,	30,	30,	29,	29,	28,	27,	27,	26,	26,	25,	24,	24,	23,	23,	22,	21,	21,	20,	20,	19,	18,	18,	17,	16,	16,	15,	15,	14,	13,	13,	12,	11,	11,	10,	10,	9,	8,	8,	7,	6,	6,	5,	5,	4,	3,	3,	2,	1,	1,	0,	0,	-1,	-2,	-2,	-3,	-4,	-4,	-5,	-5,	-6,	-7,	-7,	-8,	-9,	-9,	-10,	-10,	-11,	-12,...
                -12,	-13,	-14,	-14,	-15,	-15,	-16,	-17,	-17,	-18,	-19,	-19,	-20,	-20,	-21,	-22,	-22,	-23,	-23,	-24,	-25,	-25,	-26,	-27,	-27,	-28,	-28,	-29,	-30,	-30,	-31,	-31,	-32,	-33,	-33,	-34,	-34,	-35,	-35,	-36,	-37,	-37,	-38,	-38,	-39,	-40,	-40,	-41,	-41,	-42,	-42,	-43,	-44,	-44,	-45,	-45,...
                -46,	-46,	-47,	-47,	-48,	-49,	-49,	-50,	-50,	-51,	-51,	-52,	-52,	-53,	-53,	-54,	-54,	-55,	-56,	-56,	-57,	-57,	-58,	-58,	-59,	-59,	-60,	-60,	-61,	-61,	-62,	-62,	-63,	-63,	-64,	-64,	-65,	-65,	-66,	-66,	-66,	-67,	-67,	-68,	-68,	-69,	-69,	-70,	-70,	-71,	-71,	-71,	-72,	-72,	-73,	-73,...
                -74,	-74,	-74,	-75,	-75,	-76,	-76,	-77,	-77,	-77,	-78,	-78,	-79,	-79,	-79,	-80,	-80,	-80,	-81,	-81,	-82,	-82,	-82,	-83,	-83,	-83,	-84,	-84,	-84,	-85,	-85,	-85,	-86,	-86,	-86,	-87,	-87,	-87,	-88,	-88,	-88,	-88,	-89,	-89,	-89,	-90,	-90,	-90,	-90,	-91,	-91,	-91,	-91,	-92,	-92,	-92,...
                -92,	-93,	-93,	-93,	-93,	-94,	-94,	-94,	-94,	-94,	-95,	-95,	-95,	-95,	-95,	-96,	-96,	-96,	-96,	-96,	-96,	-97,	-97,	-97,	-97,	-97,	-97,	-98,	-98,	-98,	-98,	-98,	-98,	-98,	-98,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,...
                -100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-100,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-99,	-98,	-98,	-98,	-98,	-98,	-98,	-98,	-98,	-98,	-97,	-97,	-97,	-97,	-97,	-97,	-96,	-96,	-96,	-96,	-96,	-96,	-95,...
                -95,	-95,	-95,	-95,	-94,	-94,	-94,	-94,	-94,	-93,	-93,	-93,	-93,	-92,	-92,	-92,	-92,	-91,	-91,	-91,	-91,	-90,	-90,	-90,	-90,	-89,	-89,	-89,	-88,	-88,	-88,	-87,	-87,	-87,	-87,	-86,	-86,	-86,	-85,	-85,	-85,	-84,	-84,	-84,	-83,	-83,	-83,	-82,	-82,	-81,	-81,	-81,	-80,	-80,	-80,	-79,...
                -79,	-78,	-78,	-78,	-77,	-77,	-76,	-76,	-76,	-75,	-75,	-74,	-74,	-74,	-73,	-73,	-72,	-72,	-71,	-71,	-70,	-70,	-70,	-69,	-69,	-68,	-68,	-67,	-67,	-66,	-66,	-65,	-65,	-64,	-64,	-63,	-63,	-63,	-62,	-62,	-61,	-61,	-60,	-60,	-59,	-59,	-58,	-57,	-57,	-56,	-56,	-55,	-55,	-54,	-54,	-53,...
                -53,	-52,	-52,	-51,	-51,	-50,	-50,	-49,	-48,	-48,	-47,	-47,	-46,	-46,	-45,	-45,	-44,	-43,	-43,	-42,	-42,	-41,	-41,	-40,	-39,	-39,	-38,	-38,	-37,	-37,	-36,	-35,	-35,	-34,	-34,	-33,	-32,	-32,	-31,	-31,	-30,	-29,	-29,	-28,	-28,	-27,	-26,	-26,	-25,	-25,	-24,	-23,	-23,	-22,	-22,	-21,...
                -20,	-20,	-19,	-18,	-18,	-17,	-17,	-16,	-15,	-15,	-14,	-13,	-13,	-12,	-12,	-11,	-10,	-10,	-9,	-8,	-8,	-7,	-7,	-6,	-5,	-5,	-4,	-3,	-3,	-2,	-2,	-1,	0];

            y1 = [   % output from c
                            415216	10216080	41594832	79991816	116976440	151331024	182214672	208878896	230775952	247509696	258714784	264128024	263401576	256608504	244119016	225929992	202876552	175050784	143299968	108417128	70965440	31940488	-7791880	-47419448	-86029368	-122588944	-156497680	-186677944	-212719032	-233854184	-249665152	-259971768	-264445696	-262708712	-255046128	-241712968	-222867296	-198864472	-170417736	-138138176	-102757688
            ];
        
            x = x*8; % increase the amplitude 
            
            cic1 = ls_cic(984, 24, 5, 1);
            y = cic1.process(x);
            
            plot(y); hold;plot(y1);hold; % both are same!
        end
    end
    methods
        function obj=ls_cic(blockSz, RR, NN, MM)
                obj.nCount = 0;
                obj.BlockSize = blockSz;
                obj.N = NN;
                obj.M = MM;
                obj.R = RR;
                MAX_STAGES=8;
                obj.aState = zeros(1, MAX_STAGES, 'int64'); 
                obj.aDelayBuff = zeros(1, MAX_STAGES, 'int64'); 
                obj.aCompOut = zeros(1, MAX_STAGES, 'int64'); 
        end
        
        function y = process(obj, x)
            countOut = 1;
            y = zeros(1, obj.BlockSize/obj.R, 'int64');
            for i = 1:length(x)
                obj.aState(1) = ls_math.add(obj.aState(1) , x(i));
            	for j = 1:obj.N 
                    obj.aState(j + 1) = ls_math.add(obj.aState(j + 1) , obj.aState(j));
                end
                
                obj.nCount = obj.nCount + 1;
                if (mod(obj.nCount, obj.R) == 0)
        			obj.aDelayBuff(1) = obj.aState(obj.N - 1); % inp to the first comb
                    
                    for  j=1:obj.N+1
                        obj.aDelayBuff(j + 1) = ls_math.sub(obj.aDelayBuff(j) , obj.aCompOut(j));
                        obj.aCompOut(j) = obj.aDelayBuff(j);
                    end
                    y(countOut) = obj.aDelayBuff(obj.N); % >> pruning[1];
                    countOut = countOut + obj.R; % save interleaved 
                end
            end
        end
    end
end

